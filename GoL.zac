// The one and only Conway's Game of Life

// #help
// Help for the Zac Programming Language (https://github.com/sumeet/Zac)
//
// Define a comment with the first line set to an identifier (like #help) and it will be a first-class
// string usable inside of your program. You can read from it, and if you write to it, the change will
// be reflected inside the source file.
//
// Builtin functions:
//  add    cat          chr  eq    get_coord  gt  length  lt  mul  not 
//  print  replace_chr  set  show                                   
//
// Available variables
//  counter  false  pipe  space  star  true  width 
//
// Available comments
//  #cord  #grid  #grid_flat  #help  #length  #offset  #width

// #grid
// |     *****               *    |
// |  * *** **       *   *        |
// |     ** **    *    ***        |
// |   * ** *                     |
// |     ** *    *     *     *    |
// |     ** *        *            |
// |     ** *    *                |
// |     ** *             *       |
// |     ** **        *  *        |
// |     ** **                    |
// |     ** **              *     |
// |     *****        *           |

let pipe = // |
let star = // *
let space = chr(32)

let width = 1
while (not(eq(#grid(width), pipe))) {
  let width = add(width, 1)
}

let width = add(width, -1)

let #width = show(width)// #width
// 30

let counter = 0

defn get_coord(x, y) {
  // 1 for the first left bar
  let offset = 1
  // 1 offset for each left, right pipe and each newline if y > 0
  if (gt(y, 0)) {
    let offset = add(offset, mul(y, 3))
  }
  let offset = add(offset, mul(y, width))
  let offset = add(offset, x)
  #grid(offset)
}

let #cord = show(get_coord(4, 5))// #cord
// *

defn length(s) {
  let i = 0
  while (not(eq(s(i), false))) {
    let i = add(i, 1)
  }
  add(i, 1)
}


let #length = show(length(#grid))// #length
// 396

defn replace_chr(s, from, to) {
  let len = length(s)
  let i = 0
  while (lt(i, len)) {
    if (eq(s(i), from)) {
      let s = set(s, i, to)
    }

    let i = add(i, 1)
  }
  s
}

let #grid_flat = replace_chr(#grid, chr(10), space)// #grid_flat
// |     *****               *    | |  * *** **       *   *        | |     ** **    *    ***        | |   * ** *                     | |     ** *    *     *     *    | |     ** *        *            | |     ** *    *                | |     ** *             *       | |     ** **        *  *        | |     ** **                    | |     ** **              *     | |     *****        *           |

// #offset

